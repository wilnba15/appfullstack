from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import cx_Oracle
import os

# Crear una instancia de FastAPI
app = FastAPI()

# Conexión a la base de datos Oracle utilizando cx_Oracle
# Las credenciales y parámetros de conexión se extraen de variables de entorno
oracle_dsn = cx_Oracle.makedsn(
    os.getenv("ORACLE_HOST"), 
    os.getenv("ORACLE_PORT"), 
    service_name=os.getenv("ORACLE_SERVICE")
)
connection = cx_Oracle.connect(
    user=os.getenv("ORACLE_USER"), 
    password=os.getenv("ORACLE_PASSWORD"), 
    dsn=oracle_dsn
)

# Modelo para recibir las consultas en formato JSON
class QueryModel(BaseModel):
    question: str

# Ruta de verificación para asegurarse de que la API está corriendo
@app.get("/healthcheck")
async def healthcheck():
    return {"status": "OK"}

# Ruta para recibir preguntas y realizar consultas a la base de datos Oracle
@app.post("/query")
async def query_database(query: QueryModel):
    try:
        # Aquí puedes implementar lógica más avanzada para interpretar las preguntas y generar consultas SQL
        cursor = connection.cursor()
        
        # Por ahora, solo es un ejemplo básico de consulta
        # Suponiendo que el usuario hace preguntas sobre una tabla específica
        sql_query = f"SELECT * FROM your_table WHERE your_column LIKE '%{query.question}%'"
        
        cursor.execute(sql_query)
        result = cursor.fetchall()
        cursor.close()
        
        if not result:
            return {"message": "No se encontraron resultados para la consulta."}
        
        return {"data": result}
    
    except Exception as e:
        # Si hay algún error al realizar la consulta
        raise HTTPException(status_code=500, detail=str(e))

# Función para cerrar la conexión a la base de datos (opcional, puedes gestionarlo como prefieras)
@app.on_event("shutdown")
def shutdown():
    connection.close()
